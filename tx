#! /bin/sh

# Credits to
# - tmuxifier: https://github.com/jimeh/tmuxifier
# - shmux: https://github.com/typecraft-dev/shmux
# - ThePrimeagen's sessionizer script: https://github.com/ThePrimeagen/.dotfiles/

# FIX: error handling
# especially for sub commands

. $TX_ROOT/helpers.sh

usage() {
    cat <<EOF
Usage:
    help                   --  Because sometimes you just don't know... ¯\_(ツ)_/¯

    # Listing and Inspection
    ls                     --  Only the important shi- ... I mean running sessions and layouts.
       -a                  --  Gimme all you have! Not blazingly fast.
    preview -s [session]   --  To be used before switching sides.
            -l [layout]    --  Whats in there? *taps layout*
            -f [fragment]  --  What are THOOSE?
            -d [dir]       --  Like window shopping for code.

    # Editing
    edit -l [layout]       --  Where and mistakes happen.
         -f [fragment]     --  Small but mighty! Handle with care.
         dirs              --  Tell me where the files are, Obi-Wan.

    # Session Management
    pick                   --  Limited stock. Session or layout?
    sesh                   --  Which directory we're dropping in bois?
    [input]                --  New session. Who dis?
                           --    From layout: Instant architecture!
                           --    From fragment: Lego time!
                           --    Named session: Good ol' fashion session!
    .                      --  Session! Where? Here!
    (no arguments)         --  Attach to the last session. Ahh shit... here we go again.
EOF

    if [ -n "$1" ]; then
        exit 1
    fi
}

list() {
    declare -A session_set
    remove_duplicates() {
        local input="$1"
        local output=""
        while IFS= read -r item; do
            if [ ! ${session_set["$item"]} ]; then
                output+="$item"$'\n'
            fi
        done <<< "$input"
        echo -n "$output"
    }

    local sessions=$(get_tmux_sessions)

    while IFS= read -r session; do
      session_set["$session"]=1
    done <<< "$sessions"

    local layouts=$(remove_duplicates "$(get_layouts)")
    local fragments=""
    local dir_paths=""

    if [ "$1" = "-a" ]; then
        fragments=$(get_fragments)

        dir_paths=$(get_dir_paths)
        if [ "$?" -ne 0 ]; then
            echo "$dir_paths"
            exit 1
        fi
    fi

    local max_len=$(
        {
            echo "$sessions";
            echo "$layouts";
            echo "$fragments";
            echo "$dir_paths";
        } | awk '{print length}' | sort -nr | head -1
    )

    tmux ls -F "#{session_attached}:#{session_last_attached}:#{session_name}:#{session_windows}" |\
    sort -t: -k1,1n -k2,2nr |\
    while IFS=':' read -r is_attached last_attached session_name num_windows; do
        local attached_str=""
        if [ "$is_attached" = "1" ]; then
            attached_str=" (attached)"
        fi
        printf "%-*s (session) (%s windows)%s\n" "$max_len" "$session_name" "$num_windows" "$attached_str"
    done

    echo "$layouts" | awk -v max_len="$max_len" '{printf "%-*s (layout)\n", max_len, $1}'

    if [ -n "$fragments" ]; then
        echo "$fragments" | awk -v max_len="$max_len" '{printf "%-*s (fragment)\n", max_len, $1}'
    fi

    if [ -n "$dir_paths" ]; then
        echo "$dir_paths" | awk -v max_len="$max_len" '{printf "%-*s (directory)\n", max_len, $1}'
    fi
}

preview() {
    local filter="$1"
    local name="$2"

    case "$filter" in
        -s)
            if get_tmux_sessions | grep -qx "$name"; then
                run_tmux capture-pane -ep -t "$name"
            else
                echo "Error: session $name not found"
                exit 1
            fi
            ;;
        -l)
            if is_layout "$name"; then
                bat --paging=never --style=plain --language=sh --color=always "$DATA_DIR/$name$LAYOUT_EXT"
            else
                echo "Error: layout $name not found"
                exit 1
            fi
            ;;
        -f)
            if is_fragment "$name"; then
                bat --paging=never --style=plain --language=sh --color=always "$DATA_DIR/$name$FRAGMENT_EXT"
            else
                echo "Error: fragment $name not found"
                exit 1
            fi
            ;;
        -d)
            local path=$(get_full_dir_path "$name")
            if [ -n "$path" ]; then
                eza --group-directories-first -lah "$path" --color=always
            else
                echo "Error: directory $name not found"
                exit 1
            fi
            ;;
        *)
            echo "Error: unknown filter $filter"
            exit 1
            ;;
    esac
}

pick() {
    local awk_cmd='awk "{gsub(\"[()]\", \"\", \$2); flag = substr(\$2, 1, 1); print \"tx preview -\" flag \" \" \$1}"'
    local preview_cmd="echo {} | $awk_cmd | xargs -I{} bash -c {}"
    local selected=$(picker "$(list)" "$preview_cmd")

    if [ -z "$selected" ]; then
        exit 1
    fi

    read name type <<< $(
        echo "$selected" |\
        awk '{gsub("[()]", "", $2); flag = substr($2, 1, 1); print $1 " " flag}'
    )

    case "$type" in
        s)
            tmux_attach_or_switch "$name"
            ;;
        l)
            . "$DATA_DIR/$name$LAYOUT_EXT"
            ;;
        *)
            ;;
    esac
}

edit() {
    local filter="$1"
    local name="$2"

    case "$filter" in
        -l)
            $EDITOR "$DATA_DIR/$name$LAYOUT_EXT"
            ;;
        -f)
            $EDITOR "$DATA_DIR/$name$FRAGMENT_EXT"
            ;;
        dirs)
            $EDITOR "$DIR_PATHS_FILE"
            ;;
        *)
            echo "Error: unknown filter $filter"
            exit 1
            ;;
    esac
}

sesh() {
    local preview_cmd="basename {} | xargs -I{} tx preview -d {}"
    local selected=$(picker "$(get_dir_paths)" "$preview_cmd")
    local dir=$(get_full_dir_path "$selected")
    local name=$(basename "$dir")

    if [ -z "$selected" ]; then
        exit 1
    fi

    while is_session "$name"; do
        name="$RANDOM"
    done

    run_tmux new-session -d -s "$name" -c "$dir"
    tmux_attach_or_switch "$name"
}

if [ $# -gt 0 ]; then
    case "$1" in
        help)
            usage
            ;;
        ls)
            list "$2"
            ;;
        preview)
            preview "$2" "$3"
            ;;
        pick)
            pick
            ;;
        edit)
            edit "$2" "$3"
            ;;
        sesh)
            sesh
            ;;
    esac
else
    if [ -z "$TMUX" ]; then
        run_tmux attach || { echo "Error: tmux is not running" ; exit 1; }
    else
        echo "Error: already attached"
        exit 1
    fi
fi
